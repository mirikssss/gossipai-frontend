"use client"

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import {
  FileText,
  TrendingUp,
  Shield,
  Eye,
  Users,
  MessageSquare,
  Clock,
  AlertTriangle,
  CheckCircle,
  Download,
  Share,
  Bot,
  Send,
  Lightbulb,
  RefreshCcw,
  Heart,
  Brain,
  Compass,
  BarChart2,
  Sprout,
} from "lucide-react"
import { motion } from "framer-motion"
import { useState, useEffect } from "react"
import { apiClient } from "@/lib/api"

interface AnalysisResultsProps {
  data: {
    summary?: {
      overview?: string
      participants?: number
      messageCount?: number
      duration?: string
      mainTopics?: string[]
    }
    emotionTimeline?: {
      emotions?: Array<{
        time: string
        emotion: string
        intensity: number
        color: string
      }>
      dominantEmotion?: string
      emotionalShifts?: number
    }
    aiJudgeScore?: {
      overallScore?: number
      breakdown?: {
        clarity?: number
        empathy?: number
        professionalism?: number
        resolution?: number
      }
      verdict?: string
      recommendation?: string
    }
    subtleties?: Array<{
      type: string
      message: string
      confidence: number
      context: string
    }>
    preset?: {
      id: string
      name: string
      custom_cards: Array<{
        id: string
        name: string
        icon: string
        description: string
      }>
    }
    preset_validation?: {
      is_valid: boolean;
      reason: string;
    }
    // Teen Navigator specific data
    safety_check?: {
      bullying_indicators?: string[];
      safety_level?: number;
      recommendations?: string[];
    }
    emotion_dictionary?: {
      hidden_emotions?: Array<{
        text: string;
        explanation: string;
      }>;
    }
    social_compass?: {
      group_dynamics?: string;
      inner_circles?: string[];
      navigation_tips?: string[];
    }
    
    // Family Balance specific data
    communication_cycles?: {
      patterns?: string[];
      trigger_points?: string[];
      interruption_techniques?: string[];
    }
    needs_map?: {
      expressed_needs?: string[];
      unexpressed_needs?: string[];
      overlap_areas?: string[];
    }
    family_roles?: {
      role_distribution?: string[];
      responsibility_balance?: number;
      recommendations?: string[];
    }
    
    // Strategic HR specific data
    team_analytics?: {
      communication_metrics?: {
        speaking_time?: Record<string, number>;
        question_frequency?: Record<string, number>;
        solution_proposals?: Record<string, number>;
      }
      goal_effectiveness?: number;
    }
    psychological_safety?: {
      safety_level?: number;
      openness_indicators?: string[];
      trust_level?: string;
    }
    professional_growth?: {
      skill_analysis?: Array<{
        person: string;
        strengths: string[];
        areas_to_develop: string[];
      }>;
      recommendations?: string[];
    }
  }
}

// Import preset-specific card components
import { TeenNavigatorCards } from "@/components/teen-navigator-cards"
import { FamilyBalanceCards } from "@/components/family-balance-cards"
import { StrategicHrCards } from "@/components/strategic-hr-cards"

export function AnalysisResults({ data }: AnalysisResultsProps) {
  const [chatMessage, setChatMessage] = useState("")
  const [chatHistory, setChatHistory] = useState<Array<{ role: "assistant" | "user"; message: string }>>([
    {
      role: "assistant",
      message: "–ü—Ä–∏–≤–µ—Ç! ü§ñ –Ø –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤. –ú–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ–± —ç–º–æ—Ü–∏—è—Ö, –æ—Ü–µ–Ω–∫–µ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—â–µ–Ω–∏—è, —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö, —Ç–µ–º–∞—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
    },
  ])
  const [showTips, setShowTips] = useState(false)
  const [isLoadingChat, setIsLoadingChat] = useState(false)
  const [suggestedResponses, setSuggestedResponses] = useState<Array<{
    text: string
    reason: string
  }>>([])
  const [isLoadingSuggestions, setIsLoadingSuggestions] = useState(false)
  const [conversationId] = useState(`conv_${Date.now()}`)

  // Generate suggested responses when component mounts
  useEffect(() => {
    generateSuggestedResponses()
  }, [])

  const generateSuggestedResponses = async () => {
    setIsLoadingSuggestions(true)
    try {
      // Create conversation text from analysis data
      const conversationText = `
        –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:
        - –û–±—â–∏–π –æ–±–∑–æ—Ä: ${data.summary?.overview || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
        - –£—á–∞—Å—Ç–Ω–∏–∫–∏: ${data.summary?.participants || 0}
        - –°–æ–æ–±—â–µ–Ω–∏–π: ${data.summary?.messageCount || 0}
        - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${data.summary?.duration || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
        - –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã: ${data.summary?.mainTopics && data.summary.mainTopics.length > 0 ? data.summary.mainTopics.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
        - –î–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —ç–º–æ—Ü–∏—è: ${data.emotionTimeline?.dominantEmotion || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
        - –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã: ${data.emotionTimeline?.emotionalShifts || 0}
        - –û–±—â–∏–π –±–∞–ª–ª –ò–ò-—Å—É–¥—å–∏: ${data.aiJudgeScore?.overallScore || 0}/100
        - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${data.aiJudgeScore?.recommendation || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
        - –¢–æ–Ω–∫–æ—Å—Ç–∏: ${data.subtleties && data.subtleties.length > 0 ? data.subtleties.map(s => `${s.type}: ${s.message}`).join('; ') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
      `

      const response = await apiClient.getSuggestedResponses(conversationText)
      if (response && typeof response === 'object' && 'success' in response && response.success && 'suggestions' in response) {
        setSuggestedResponses(response.suggestions as Array<{ text: string; reason: string }>)
      }
    } catch (error) {
      console.error("Failed to generate suggested responses:", error)
      // Fallback to default suggestions
      setSuggestedResponses([
        {
          text: "–ü–æ–Ω–∏–º–∞—é —Ç–≤–æ—é —Ç–æ—á–∫—É –∑—Ä–µ–Ω–∏—è! ü§ù",
          reason: "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–º–ø–∞—Ç–∏—é –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –¥–∏–∞–ª–æ–≥—É"
        },
        {
          text: "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –º–Ω–µ –≤–∞–∂–Ω–æ —É—Å–ª—ã—à–∞—Ç—å —Ç–≤–æ–µ –º–Ω–µ–Ω–∏–µ üí¨",
          reason: "–ü–æ–æ—â—Ä—è–µ—Ç –æ—Ç–∫—Ä—ã—Ç—É—é –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é"
        },
        {
          text: "–î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –∏ –≤–µ—Ä–Ω–µ–º—Å—è –ø–æ–∑–∂–µ ‚è∞",
          reason: "–ü–æ–º–æ–≥–∞–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞"
        }
      ])
    } finally {
      setIsLoadingSuggestions(false)
    }
  }

  const getScoreColor = (score: number) => {
    if (score >= 80) return "text-green-500"
    if (score >= 60) return "text-yellow-500"
    return "text-red-500"
  }

  const getScoreBadgeVariant = (score: number) => {
    if (score >= 80) return "default"
    if (score >= 60) return "secondary"
    return "destructive"
  }

  const handleSendMessage = async () => {
    if (!chatMessage.trim() || isLoadingChat) return

    const userMessage = chatMessage.trim()
    setChatMessage("")
    setIsLoadingChat(true)

    // Add user message to chat
    setChatHistory((prev) => [
      ...prev,
      { role: "user", message: userMessage },
    ])

    try {
      // Create analysis context for the AI
      const analysisContext = `
        –ö–æ–Ω—Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:
        - –û–±—â–∏–π –æ–±–∑–æ—Ä: ${data.summary?.overview || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
        - –£—á–∞—Å—Ç–Ω–∏–∫–∏: ${data.summary?.participants || 0}
        - –°–æ–æ–±—â–µ–Ω–∏–π: ${data.summary?.messageCount || 0}
        - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${data.summary?.duration || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
        - –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã: ${data.summary?.mainTopics && data.summary.mainTopics.length > 0 ? data.summary.mainTopics.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
        - –î–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —ç–º–æ—Ü–∏—è: ${data.emotionTimeline?.dominantEmotion || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
        - –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã: ${data.emotionTimeline?.emotionalShifts || 0}
        - –û–±—â–∏–π –±–∞–ª–ª –ò–ò-—Å—É–¥—å–∏: ${data.aiJudgeScore?.overallScore || 0}/100
        - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${data.aiJudgeScore?.recommendation || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
        - –¢–æ–Ω–∫–æ—Å—Ç–∏: ${data.subtleties && data.subtleties.length > 0 ? data.subtleties.map(s => `${s.type}: ${s.message}`).join('; ') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
      `

      const response = await apiClient.chatWithAI(userMessage, conversationId, analysisContext)
      
      if (response && typeof response === 'object' && 'success' in response && response.success && 'response' in response) {
        setChatHistory((prev) => [
          ...prev,
          { role: "assistant", message: response.response as string },
        ])
      } else {
        // Fallback response based on analysis data
        const fallbackResponse = generateContextualResponse(userMessage, data)
        setChatHistory((prev) => [
          ...prev,
          { role: "assistant", message: fallbackResponse },
        ])
      }
    } catch (error) {
      console.error("Chat error:", error)
      // Fallback response on error
      const fallbackResponse = generateContextualResponse(userMessage, data)
      setChatHistory((prev) => [
        ...prev,
        { role: "assistant", message: fallbackResponse },
      ])
    } finally {
      setIsLoadingChat(false)
    }
  }

  // Helper function to generate contextual responses
  const generateContextualResponse = (userMessage: string, analysisData: any): string => {
    const message = userMessage.toLowerCase()
    const score = analysisData.aiJudgeScore?.overallScore || 0
    const dominantEmotion = analysisData.emotionTimeline?.dominantEmotion || '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è'
    const participants = analysisData.summary?.participants || 0
    
    if (message.includes('—ç–º–æ—Ü') || message.includes('—á—É–≤—Å—Ç–≤')) {
      return `üòä –û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ, –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —ç–º–æ—Ü–∏—è –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ - "${dominantEmotion}". –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç ${analysisData.emotionTimeline?.emotionalShifts || 0} –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —ç–º–æ—Ü–∏—è–º–∏, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –æ –∂–∏–≤–æ–º –∏ –¥–∏–Ω–∞–º–∏—á–Ω–æ–º –æ–±—â–µ–Ω–∏–∏.`
    }
    
    if (message.includes('–æ—Ü–µ–Ω–∫') || message.includes('–±–∞–ª–ª') || message.includes('—Å—É–¥—å')) {
      const scoreText = score >= 80 ? '–æ—Ç–ª–∏—á–Ω—É—é' : score >= 60 ? '—Ö–æ—Ä–æ—à—É—é' : '—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—É—é'
      return `‚öñÔ∏è –ò–ò-—Å—É–¥—å—è –æ—Ü–µ–Ω–∏–ª –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—â–µ–Ω–∏—è –Ω–∞ ${score}/100 –±–∞–ª–ª–æ–≤ - —ç—Ç–æ ${scoreText} –æ—Ü–µ–Ω–∫—É! ${analysisData.aiJudgeScore?.recommendation || '–†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.'}`
    }
    
    if (message.includes('—É—á–∞—Å—Ç–Ω–∏–∫') || message.includes('–ª—é–¥–∏')) {
      return `üë• –í —Ä–∞–∑–≥–æ–≤–æ—Ä–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–æ ${participants} —á–µ–ª–æ–≤–µ–∫(–∞). ${analysisData.summary?.overview || '–û–±—â–µ–Ω–∏–µ –±—ã–ª–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–º –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º.'}`
    }
    
    if (message.includes('—Ç–µ–º–∞') || message.includes('–æ —á–µ–º')) {
      const topics = analysisData.summary?.mainTopics && analysisData.summary.mainTopics.length > 0 ? analysisData.summary.mainTopics.join(', ') : '–æ–±—â–∏–µ —Ç–µ–º—ã'
      return `üìù –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: ${topics}. ${analysisData.summary?.overview || '–†–∞–∑–≥–æ–≤–æ—Ä –±—ã–ª —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º.'}`
    }
    
    if (message.includes('—Å–æ–≤–µ—Ç') || message.includes('—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü')) {
      return `üí° ${analysisData.aiJudgeScore?.recommendation || '–û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–æ–µ –∏ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ. –û–±—Ä–∞—â–∞–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.'}`
    }
    
    // Default contextual response
    return `ü§ñ –û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ, –æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–æ –æ—Ü–µ–Ω–∫—É ${score}/100 –±–∞–ª–ª–æ–≤. –î–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —ç–º–æ—Ü–∏—è - "${dominantEmotion}". ${analysisData.aiJudgeScore?.recommendation || '–†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥!'}`
  }

  return (
    <div className="space-y-6">
      {/* Header Actions */}
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-bold text-foreground">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞</h2>
        <div className="flex space-x-2">
          <Button variant="outline" size="sm" className="border-neon-blue/20 hover:bg-neon-blue/10 bg-transparent">
            <Download className="w-4 h-4 mr-2" />
            –≠–∫—Å–ø–æ—Ä—Ç
          </Button>
          <Button
            variant="outline"
            size="sm"
            className="border-neon-turquoise/20 hover:bg-neon-turquoise/10 bg-transparent"
          >
            <Share className="w-4 h-4 mr-2" />
            –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
          </Button>
        </div>
      </div>

      <div className="grid-cards-mobile">
        {/* Summary Card */}
        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.6 }} className="card-container">
                      <Card className="bg-card/50 backdrop-blur border-neon-purple/20 w-full">
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <FileText className="w-5 h-5 text-neon-purple" />
                <span>–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ</span>
              </CardTitle>
              <CardDescription>–û–±—â–∏–π –æ–±–∑–æ—Ä —Ä–∞–∑–≥–æ–≤–æ—Ä–∞</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <p className="text-sm text-foreground leading-relaxed">{data.summary?.overview || '–û–±–∑–æ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω'}</p>

              <div className="grid grid-cols-2 gap-4 pt-4 border-t border-border/40">
                <div className="flex items-center space-x-2">
                  <Users className="w-4 h-4 text-neon-blue" />
                  <span className="text-sm text-muted-foreground">–£—á–∞—Å—Ç–Ω–∏–∫–∏:</span>
                  <span className="text-sm font-medium">{data.summary?.participants || 0}</span>
                </div>
                <div className="flex items-center space-x-2">
                  <MessageSquare className="w-4 h-4 text-neon-turquoise" />
                  <span className="text-sm text-muted-foreground">–°–æ–æ–±—â–µ–Ω–∏–π:</span>
                  <span className="text-sm font-medium">{data.summary?.messageCount || 0}</span>
                </div>
                <div className="flex items-center space-x-2">
                  <Clock className="w-4 h-4 text-neon-purple" />
                  <span className="text-sm text-muted-foreground">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</span>
                  <span className="text-sm font-medium">{data.summary?.duration || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
                </div>
              </div>

              <div className="pt-2">
                <p className="text-sm text-muted-foreground mb-2">–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:</p>
                <div className="flex flex-wrap gap-2">
                  {data.summary?.mainTopics && data.summary.mainTopics.length > 0 ? (
                    data.summary.mainTopics.map((topic, index) => (
                      <Badge key={index} variant="secondary" className="text-xs">
                        {topic}
                      </Badge>
                    ))
                  ) : (
                    <span className="text-sm text-muted-foreground">–¢–µ–º—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã</span>
                  )}
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>

        {/* AI Judge Score Card */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.1 }}
          className="card-container"
        >
                      <Card className="bg-card/50 backdrop-blur border-neon-blue/20 w-full">
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Shield className="w-5 h-5 text-neon-blue" />
                <span>–ò–ò-—Å—É–¥—å—è</span>
              </CardTitle>
              <CardDescription>–û–±—ä–µ–∫—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—â–µ–Ω–∏—è</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="text-center">
                <div className={`text-4xl font-bold ${getScoreColor(data.aiJudgeScore?.overallScore || 0)} mb-2`}>
                  {data.aiJudgeScore?.overallScore || 0}/100
                </div>
                <Badge variant={getScoreBadgeVariant(data.aiJudgeScore?.overallScore || 0)} className="mb-4 max-w-full break-words">
                  {data.aiJudgeScore?.verdict || '–û—Ü–µ–Ω–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞'}
                </Badge>
              </div>

              <div className="space-y-3">
                {data.aiJudgeScore?.breakdown && Object.keys(data.aiJudgeScore.breakdown).length > 0 ? (
                  Object.entries(data.aiJudgeScore.breakdown).map(([key, value]) => (
                    <div key={key} className="space-y-1">
                      <div className="flex justify-between text-sm">
                        <span className="capitalize text-muted-foreground">
                          {key === "clarity"
                            ? "–Ø—Å–Ω–æ—Å—Ç—å"
                            : key === "empathy"
                              ? "–≠–º–ø–∞—Ç–∏—è"
                              : key === "professionalism"
                                ? "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º"
                                : "–†–µ—à–µ–Ω–∏–µ"}
                        </span>
                        <span className="font-medium">{value || 0}%</span>
                      </div>
                      <Progress value={value || 0} className="h-2" />
                    </div>
                  ))
                ) : (
                  <div className="text-center text-muted-foreground">
                    –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞
                  </div>
                )}
              </div>

              <div className="pt-4 border-t border-border/40">
                <p className="text-sm text-muted-foreground">
                  <strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</strong> {data.aiJudgeScore?.recommendation || '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞'}
                </p>
              </div>
            </CardContent>
          </Card>
        </motion.div>

        {/* Emotion Timeline Card */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.2 }}
        >
          <Card className="bg-card/50 backdrop-blur border-neon-turquoise/20 h-full">
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <TrendingUp className="w-5 h-5 text-neon-turquoise" />
                <span>–í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞ —ç–º–æ—Ü–∏–π</span>
              </CardTitle>
              <CardDescription>–ö–∞–∫ –º–µ–Ω—è–ª–∏—Å—å —ç–º–æ—Ü–∏–∏ –≤ —Ö–æ–¥–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center justify-between text-sm">
                <span className="text-muted-foreground">–î–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —ç–º–æ—Ü–∏—è:</span>
                <Badge variant="outline" className="border-neon-turquoise/40 text-neon-turquoise whitespace-nowrap">
                  {data.emotionTimeline?.dominantEmotion || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                </Badge>
              </div>

              <div className="space-y-3">
                {data.emotionTimeline?.emotions && data.emotionTimeline.emotions.length > 0 ? (
                  data.emotionTimeline.emotions.map((emotion, index) => (
                    <div key={index} className="flex items-center space-x-3">
                      <span className="text-xs text-muted-foreground w-12">{emotion.time}</span>
                    <div className="flex-1">
                      <div className="flex justify-between text-sm mb-1">
                        <span className="flex items-center gap-1">{emotion.emotion}</span>
                        <span className="text-muted-foreground">{emotion.intensity}%</span>
                      </div>
                      <div className="w-full bg-muted rounded-full h-2">
                        <div
                          className="h-2 rounded-full transition-all duration-300"
                          style={{
                            width: `${emotion.intensity}%`,
                            backgroundColor: emotion.color,
                          }}
                        />
                      </div>
                    </div>
                  </div>
                ))
                ) : (
                  <div className="text-center text-muted-foreground">
                    –î–∞–Ω–Ω—ã–µ –æ–± —ç–º–æ—Ü–∏—è—Ö –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã
                  </div>
                )}
              </div>

              <div className="pt-4 border-t border-border/40 text-center">
                <p className="text-sm text-muted-foreground">
                  –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: <span className="font-medium">{data.emotionTimeline?.emotionalShifts || 0}</span>
                </p>
              </div>
            </CardContent>
          </Card>
        </motion.div>

        {/* Subtleties Detector Card */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.3 }}
        >
          <Card className="bg-card/50 backdrop-blur border-neon-purple/20 h-full">
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Eye className="w-5 h-5 text-neon-purple" />
                <span>–î–µ—Ç–µ–∫—Ç–æ—Ä —Ç–æ–Ω–∫–æ—Å—Ç–µ–π</span>
              </CardTitle>
              <CardDescription>–°–∫—Ä—ã—Ç—ã–µ —Å–º—ã—Å–ª—ã –∏ –ø–æ–¥—Ç–µ–∫—Å—Ç—ã</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {data.subtleties && data.subtleties.length > 0 ? (
                data.subtleties.map((subtlety, index) => (
                  <div key={index} className="p-4 rounded-lg bg-muted/50 border border-border/40">
                    <div className="flex items-start justify-between mb-2">
                      <h4 className="font-medium text-sm text-foreground">{subtlety.type}</h4>
                      <div className="flex items-center space-x-1">
                        {subtlety.confidence >= 80 ? (
                          <CheckCircle className="w-4 h-4 text-green-500" />
                        ) : (
                          <AlertTriangle className="w-4 h-4 text-yellow-500" />
                        )}
                        <span className="text-xs text-muted-foreground">{subtlety.confidence}%</span>
                      </div>
                    </div>
                    <p className="text-sm text-muted-foreground mb-2">{subtlety.message}</p>
                    <div className="text-xs text-muted-foreground bg-background/50 p-2 rounded border-l-2 border-neon-purple/40">
                      <strong>–ö–æ–Ω—Ç–µ–∫—Å—Ç:</strong> {subtlety.context}
                    </div>
                  </div>
                ))
              ) : (
                <div className="text-center text-muted-foreground">
                  –¢–æ–Ω–∫–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã
                </div>
              )}
            </CardContent>
          </Card>
        </motion.div>
        
        {/* Preset-specific cards */}
        {data.preset?.id === 'teen_navigator' && (
          <TeenNavigatorCards data={data} />
        )}
        
        {data.preset?.id === 'family_balance' && (
          <FamilyBalanceCards data={data} />
        )}
        
        {data.preset?.id === 'strategic_hr' && (
          <StrategicHrCards data={data} />
        )}
      </div>

      {/* AI Chatbot section with full width */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, delay: 0.4 }}
        className="mt-8"
      >
        <Card className="bg-card/50 backdrop-blur border-neon-blue/20">
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <Bot className="w-5 h-5 text-neon-blue" />
              <span>–ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç</span>
            </CardTitle>
            <CardDescription>–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –æ–± –∞–Ω–∞–ª–∏–∑–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞. –Ø –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —ç–º–æ—Ü–∏—è—Ö, –æ—Ü–µ–Ω–∫–µ –∏ –¥–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="max-h-64 overflow-y-auto space-y-3 p-4 bg-muted/20 rounded-lg">
              {chatHistory && chatHistory.length > 0 ? (
                chatHistory.map((msg, index) => (
                  <div key={index} className={`flex ${msg.role === "user" ? "justify-end" : "justify-start"}`}>
                    <div
                      className={`max-w-[80%] p-3 rounded-lg ${
                        msg.role === "user" 
                          ? "bg-neon-blue text-white" 
                          : "bg-muted/60 text-foreground border border-border/40"
                      }`}
                    >
                      <p className="text-sm leading-relaxed whitespace-pre-wrap">{msg.message}</p>
                    </div>
                  </div>
                ))
              ) : (
                <div className="text-center text-muted-foreground py-4">
                  –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º
                </div>
              )}
              {isLoadingChat && (
                <div className="flex justify-start">
                  <div className="max-w-[80%] p-3 rounded-lg bg-muted text-foreground">
                    <div className="flex items-center space-x-2">
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-neon-blue"></div>
                      <span className="text-sm">–ò–ò –¥—É–º–∞–µ—Ç...</span>
                    </div>
                  </div>
                </div>
              )}
            </div>
            <div className="flex space-x-2">
              <Input
                placeholder="–°–ø—Ä–æ—Å–∏—Ç–µ –æ–± —ç–º–æ—Ü–∏—è—Ö, –æ—Ü–µ–Ω–∫–µ, —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –∏–ª–∏ —Ç–µ–º–∞—Ö..."
                value={chatMessage}
                onChange={(e) => setChatMessage(e.target.value)}
                onKeyPress={(e) => e.key === "Enter" && handleSendMessage()}
                className="flex-1"
                disabled={isLoadingChat}
              />
              <Button onClick={handleSendMessage} size="sm" disabled={isLoadingChat || !chatMessage.trim()}>
                <Send className="w-4 h-4" />
              </Button>
            </div>
          </CardContent>
        </Card>
      </motion.div>

      {/* Suggested Responses section */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, delay: 0.5 }}
        className="mt-8"
      >
        <Card className="bg-card/50 backdrop-blur border-neon-turquoise/20">
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <Lightbulb className="w-5 h-5 text-neon-turquoise" />
              <span>–ü–æ–¥—Ö–æ–¥—è—â–∏–µ –æ—Ç–≤–µ—Ç—ã</span>
            </CardTitle>
            <CardDescription>–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ–±—â–µ–Ω–∏—è</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <Button
              onClick={() => setShowTips(!showTips)}
              variant="outline"
              className="w-full border-neon-turquoise/20 hover:bg-neon-turquoise/10"
            >
              {showTips ? "–°–∫—Ä—ã—Ç—å —Å–æ–≤–µ—Ç—ã" : "–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –æ–±—â–µ–Ω–∏—é"}
            </Button>

            {showTips && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: "auto" }}
                transition={{ duration: 0.3 }}
                className="space-y-3"
              >
                {isLoadingSuggestions ? (
                  <div className="flex items-center justify-center py-4">
                    <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-neon-turquoise"></div>
                    <span className="ml-2 text-sm text-muted-foreground">–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–≤–µ—Ç—ã...</span>
                  </div>
                ) : (
                  suggestedResponses && suggestedResponses.length > 0 ? (
                    suggestedResponses.map((suggestion, index) => (
                      <motion.div
                        key={index}
                        initial={{ opacity: 0, x: -20 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ duration: 0.3, delay: index * 0.1 }}
                        className="p-4 bg-muted/30 rounded-lg border border-neon-turquoise/10"
                      >
                        <p className="text-sm text-foreground font-medium mb-2">{suggestion.text}</p>
                        <p className="text-xs text-muted-foreground">{suggestion.reason}</p>
                      </motion.div>
                    ))
                  ) : (
                    <div className="text-center text-muted-foreground py-4">
                      –°–æ–≤–µ—Ç—ã –ø–æ –æ–±—â–µ–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                    </div>
                  )
                )}
              </motion.div>
            )}
          </CardContent>
        </Card>
      </motion.div>
    </div>
  )
}
